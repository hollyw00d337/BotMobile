# Configuración Nginx para BotMobile - Producción
# Proxy reverso con seguridad, rate limiting y cache

events {
    worker_connections 1024;
    use epoll;
}

http {
    # Configuración básica
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Seguridad
    server_tokens off;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    # Compresión
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=5r/s;
    
    # Upstream para Rasa
    upstream rasa_backend {
        server rasa:5005;
        keepalive 32;
    }
    
    # Configuración principal del servidor
    server {
        listen 80;
        server_name _;
        
        # Límites de tamaño
        client_max_body_size 1M;
        client_body_timeout 10s;
        client_header_timeout 10s;
        
        # Health Check (simple)
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # Webhook principal para Node-RED
        location /webhook {
            # Rate limiting específico para webhook
            limit_req zone=webhook burst=20 nodelay;
            
            # Headers para el proxy
            proxy_pass http://rasa_backend/webhooks/rest/webhook;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # CORS para Node-RED (específico)
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            
            # Manejo de preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # COMPATIBILIDAD: Ruta original para Node-RED (sin cambios necesarios)
        location /webhooks/rest/webhook {
            # Mismo rate limiting que /webhook
            limit_req zone=webhook burst=20 nodelay;
            
            # Headers para el proxy
            proxy_pass http://rasa_backend/webhooks/rest/webhook;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # CORS para Node-RED
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            
            # Manejo de preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # API de Rasa (para debugging en producción - acceso restringido)
        location /api/ {
            # Rate limiting más estricto para API
            limit_req zone=general burst=10 nodelay;
            
            # Solo permitir desde IPs específicas (opcional)
            # allow 192.168.1.0/24;
            # deny all;
            
            proxy_pass http://rasa_backend/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Servir imágenes estáticas (cache agresivo)
        location /images/ {
            # Cache por 1 año
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # Si las imágenes están locales, descomenta:
            # root /var/www;
            # try_files $uri $uri/ =404;
            
            # Por ahora, proxy a GitHub (temporal)
            proxy_pass https://raw.githubusercontent.com/hollyw00d337/BotMobile/main/assets/images/;
            proxy_cache_valid 200 1d;
        }
        
        # Página de estado/info básica
        location / {
            return 200 "BotMobile API - Ready\nWebhook: /webhook\nHealth: /health\n";
            add_header Content-Type text/plain;
        }
        
        # Bloquear accesos no deseados
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Error pages personalizadas
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            return 404 "BotMobile - Endpoint not found\n";
            add_header Content-Type text/plain;
        }
        
        location = /50x.html {
            return 500 "BotMobile - Service temporarily unavailable\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Configuración SSL (para cuando tengas certificado)
    # server {
    #     listen 443 ssl http2;
    #     server_name tudominio.com;
    #     
    #     ssl_certificate /etc/ssl/certs/botmobile.crt;
    #     ssl_certificate_key /etc/ssl/private/botmobile.key;
    #     
    #     # Misma configuración que el servidor HTTP
    #     # ... (copiar locations de arriba)
    # }
}